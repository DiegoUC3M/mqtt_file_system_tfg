input {
	file {
		path => "/home/diego/PycharmProjects/mqtt_test/logging_FUSE.log"
		start_position => "beginning"
		type => "logging_FUSE"
  	}
  	file {
  		path => "/home/diego/PycharmProjects/mqtt_test/logging_MQTT.log"
  		start_position => "beginning"
		type => "logging_MQTT"
	}
}

filter {



	if [type] == "logging_FUSE" {
		grok {
			
			match => {
				"message" => [ 
				   #CAPTURAR NIVEL DEBUG CON OS_RESULT
				  "%{LOGLEVEL:log_level} - %{TIMESTAMP_ISO8601:timestamp} - topic : %{DATA:topic} - func : %{DATA:func} - args : (\[%{DATA:args}\]|%{DATA:args}) - os_result: %{GREEDYDATA:os_result}",
				  
				  #CAPTURAR NIVEL DEBUG SIN OS_RESULT
				  "%{LOGLEVEL:log_level} - %{TIMESTAMP_ISO8601:timestamp} - topic : %{DATA:topic} - func : %{DATA:func} - args : %{GREEDYDATA:args}",
				  
				  #CAPTURAR NIVEL INFO:
				  "%{LOGLEVEL:log_level} - %{TIMESTAMP_ISO8601:timestamp} - La operacion %{WORD:operation} ha tenido exito",
				  
				  #CAPTURAR NIVEL ERROR:
				  "%{LOGLEVEL:log_level} - %{TIMESTAMP_ISO8601:timestamp} - Ha habido un error a la hora de ejecutar la operacion: '%{DATA:func}' con los argumentos: (\[%{DATA:args}\]|%{DATA:args}) - Codigo de error: %{NUMBER:error_code} - Mensaje de error: %{GREEDYDATA:error_msg}"
				  ]
	  		}
	  	}
	  	date {
	    		match => ["timestamp", "YYYY-MM-dd HH:mm:ss"]
	    		timezone => "UTC"
	  	}
	}
	
	if [type] == "logging_MQTT" {
		
		grok {
			match => { "message" => "%{LOGLEVEL:log_level} - %{TIMESTAMP_ISO8601:timestamp} - %{GREEDYDATA:mqtt_msg}" }
		}
		
		date {
	    		match => ["timestamp", "YYYY-MM-dd HH:mm:ss"]
	    		timezone => "UTC"
	  	}
	
	}
	
}

output {
	stdout { 
		codec => rubydebug 
	}
	
	elasticsearch {
		
		hosts => ["https://localhost:9200"]
    		index => "indice_tfg"
    		user => "elastic"
    		password => "8tsgBOTy=4mN*rc*gC=v"
    		ssl_certificate_verification => false
	}

}

